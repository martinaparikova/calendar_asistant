import os, yaml, json, sys
cfg = {
  "time_zone": "Europe/Prague",
  "dry_run": False,
  "calendars": [],
  "intro_text_daily": "Níže je zítřejší plán z našich kalendářů.",
  "intro_text_weekly": "Tady je plán na příští týden (po–ne).",
  "smtp": {
    "from": os.getenv("SMTP_FROM") or os.getenv("SMTP_USERNAME"),
    "to": [x.strip() for x in (os.getenv("SMTP_TO") or os.getenv("SMTP_USERNAME") or "").split(",") if x.strip()],
    "server": os.getenv("SMTP_SERVER") or "smtp.gmail.com",
    "port": int(os.getenv("SMTP_PORT") or "587"),
    "username": os.getenv("SMTP_USERNAME"),
    "password": os.getenv("SMTP_PASSWORD"),
    "use_tls": True
  },
  "slack": {
    "enabled": bool(os.getenv("SLACK_WEBHOOK_URL")),
    "webhook_url": os.getenv("SLACK_WEBHOOK_URL") or ""
  },
  "slack_bot": {
    "enabled": bool(os.getenv("SLACK_BOT_TOKEN") and os.getenv("SLACK_CHANNEL_ID")),
    "token": os.getenv("SLACK_BOT_TOKEN") or "",
    "channel_id": os.getenv("SLACK_CHANNEL_ID") or ""
  }
}
cal_json = os.getenv("CALENDARS_JSON")
if not cal_json:
    print("::error::Missing CALENDARS_JSON secret (array of {name, ics_url})")
    sys.exit(1)
try:
    items = json.loads(cal_json)
    assert isinstance(items, list)
    for it in items:
        if not it.get("name") or not it.get("ics_url"):
            continue
        url = it["ics_url"].replace("webcal://", "https://")
        cfg["calendars"].append({"name": it["name"], "ics_url": url})
except Exception as e:
    print(f"::error::Invalid CALENDARS_JSON: {e}")
    sys.exit(1)
with open("config.yaml", "w", encoding="utf-8") as f:
    yaml.safe_dump(cfg, f, allow_unicode=True, sort_keys=False)
print("config.yaml written with", len(cfg["calendars"]), "calendars.")
